name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: [self-hosted, macos, x64]
    env:
      ImageOS: macos15
      MIX_ENV: prod
      PHX_SERVER: true
      PHX_HOST: errjordan.dev
      PORT: 4444
      SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      RELEASE_DISTRIBUTION: name
      RELEASE_NODE: errjordan@127.0.0.1
      RELEASE_NAME: errjordan

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Define install paths and ensure dirs
        shell: bash
        run: |
          set -euo pipefail
          echo "APP_HOME=$HOME/apps/errjordan" >> "$GITHUB_ENV"
          echo "INSTALL_DIR=$HOME/apps/errjordan/releases/${GITHUB_SHA}/errjordan" >> "$GITHUB_ENV"
          echo "CURRENT_LINK=$HOME/apps/errjordan/current" >> "$GITHUB_ENV"
          echo "BIN=$HOME/apps/errjordan/current/bin/errjordan" >> "$GITHUB_ENV"
          echo "NEW_BIN=$HOME/apps/errjordan/releases/${GITHUB_SHA}/errjordan/bin/$RELEASE_NAME" >> "$GITHUB_ENV"
          echo "LAUNCH_AGENT_LABEL=dev.errjordan.app" >> "$GITHUB_ENV"
          echo "LAUNCH_AGENT_TARGET=gui/$(id -u)/dev.errjordan.app" >> "$GITHUB_ENV"
          echo "LAUNCH_AGENT_PLIST=$HOME/Library/LaunchAgents/dev.errjordan.app.plist" >> "$GITHUB_ENV"
          mkdir -p "$HOME/apps/errjordan/releases" "$HOME/apps/errjordan/log"

      - name: Set up Erlang/Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: "1.15"
          otp-version: "26"

      - name: Cache deps and build
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: mix-${{ runner.os }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            mix-${{ runner.os }}-

      - name: Prepare Mix
        run: |
          mix local.hex --force
          mix local.rebar --force

      - name: Install dependencies
        run: mix deps.get

      - name: Compile app
        run: mix compile

      - name: Build assets
        run: mix assets.deploy

      - name: Create release
        run: mix release --overwrite

      - name: Stage new release (no symlink switch yet)
        shell: bash
        run: |
          set -euo pipefail
          rsync -a --delete "_build/prod/rel/$RELEASE_NAME/" "$INSTALL_DIR/"
          # do not switch symlink yet; verify first

      - name: Stop launchd-managed release
        shell: bash
        run: |
          set -euo pipefail
          launchctl bootout "$LAUNCH_AGENT_TARGET" || true
          if [ -x "$BIN" ]; then
            $BIN stop || true
          fi

      - name: Run migrations on staged release
        shell: bash
        run: |
          set -euo pipefail
          PHX_SERVER=true \
          SECRET_KEY_BASE='${{ secrets.SECRET_KEY_BASE }}' \
          DATABASE_URL='${{ secrets.DATABASE_URL }}' \
          PHX_HOST="$PHX_HOST" \
          PORT="$PORT" \
          RELEASE_DISTRIBUTION="$RELEASE_DISTRIBUTION" \
          RELEASE_NODE="$RELEASE_NODE" \
          $NEW_BIN eval "Ecto.Migrator.with_repo(Errjordan.Repo, &Ecto.Migrator.run(&1, :up, all: true))"

      - name: Switch current symlink to staged release
        shell: bash
        run: |
          set -euo pipefail
          ln -sfn "$INSTALL_DIR" "$CURRENT_LINK"

      - name: Relaunch app via launchd
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f "$LAUNCH_AGENT_PLIST" ]; then
            echo "LaunchAgent plist not found at $LAUNCH_AGENT_PLIST" >&2
            exit 1
          fi
          launchctl bootstrap gui/$(id -u) "$LAUNCH_AGENT_PLIST"
          launchctl enable "$LAUNCH_AGENT_TARGET" || true
          launchctl kickstart -k "$LAUNCH_AGENT_TARGET"

      - name: Verify release is running
        shell: bash
        run: |
          set -euo pipefail
          # Wait up to 30s for launchd to report a PID
          ok=0
          for i in {1..30}; do
            if output=$($BIN pid 2>&1); then
              echo "Release is up (pid ok: ${output})"
              ok=1
              break
            else
              echo "pid attempt ${i} failed: ${output}"
            fi
            sleep 1
          done

          if [ "$ok" != "1" ]; then
            echo "ERROR: Release failed to report PID" >&2
            echo "---- launchctl status ----"
            launchctl print "$LAUNCH_AGENT_TARGET" || true
            echo "---- recent stdout ----"
            tail -n 200 "$APP_HOME/log/errjordan.out.log" || true
            echo "---- recent stderr ----"
            tail -n 200 "$APP_HOME/log/errjordan.err.log" || true
            exit 1
          fi

          curl -g --max-time 5 -sS -o /dev/null "http://[::1]:${PORT}/health" || curl --max-time 5 -sS -o /dev/null "http://127.0.0.1:${PORT}/health" || true
